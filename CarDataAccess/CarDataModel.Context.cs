//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CarDBEntities : DbContext
    {
        public CarDBEntities()
            : base("name=CarDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BodyStyle> BodyStyles { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<DriveType> DriveTypes { get; set; }
        public virtual DbSet<EngineFuel> EngineFuels { get; set; }
        public virtual DbSet<EnginePosition> EnginePositions { get; set; }
        public virtual DbSet<EngineType> EngineTypes { get; set; }
        public virtual DbSet<Make> Makes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TransmissionType> TransmissionTypes { get; set; }
    
        public virtual ObjectResult<CarsByYear_Result> CarsByYear(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarsByYear_Result>("CarsByYear", yearParameter);
        }
    
        public virtual ObjectResult<string> DistinctYears()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DistinctYears");
        }
    
        public virtual ObjectResult<GetCars_Result> GetCars(string model_year, string make, string model_name, string model_trim)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            var model_trimParameter = model_trim != null ?
                new ObjectParameter("model_trim", model_trim) :
                new ObjectParameter("model_trim", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCars_Result>("GetCars", model_yearParameter, makeParameter, model_nameParameter, model_trimParameter);
        }
    
        public virtual ObjectResult<GetCarsByBodyStyle_Result> GetCarsByBodyStyle(string body_style)
        {
            var body_styleParameter = body_style != null ?
                new ObjectParameter("body_style", body_style) :
                new ObjectParameter("body_style", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsByBodyStyle_Result>("GetCarsByBodyStyle", body_styleParameter);
        }
    
        public virtual ObjectResult<GetCarsByCylinders_Result> GetCarsByCylinders(string engine_num_cyl)
        {
            var engine_num_cylParameter = engine_num_cyl != null ?
                new ObjectParameter("engine_num_cyl", engine_num_cyl) :
                new ObjectParameter("engine_num_cyl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsByCylinders_Result>("GetCarsByCylinders", engine_num_cylParameter);
        }
    
        public virtual ObjectResult<GetCarsByEnginePosition_Result> GetCarsByEnginePosition(string engine_position)
        {
            var engine_positionParameter = engine_position != null ?
                new ObjectParameter("engine_position", engine_position) :
                new ObjectParameter("engine_position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsByEnginePosition_Result>("GetCarsByEnginePosition", engine_positionParameter);
        }
    
        public virtual ObjectResult<GetCarsByYear_Result> GetCarsByYear(string model_year)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsByYear_Result>("GetCarsByYear", model_yearParameter);
        }
    
        public virtual ObjectResult<GetCarsByYearMake_Result> GetCarsByYearMake(string model_year, string make)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsByYearMake_Result>("GetCarsByYearMake", model_yearParameter, makeParameter);
        }
    
        public virtual ObjectResult<GetCarsByYearMakeModel_Result> GetCarsByYearMakeModel(string model_year, string make, string model_name)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsByYearMakeModel_Result>("GetCarsByYearMakeModel", model_yearParameter, makeParameter, model_nameParameter);
        }
    
        public virtual ObjectResult<GetCarsByYearMakeModelTrim_Result> GetCarsByYearMakeModelTrim(string model_year, string make, string model_name, string model_trim)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            var model_trimParameter = model_trim != null ?
                new ObjectParameter("model_trim", model_trim) :
                new ObjectParameter("model_trim", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsByYearMakeModelTrim_Result>("GetCarsByYearMakeModelTrim", model_yearParameter, makeParameter, model_nameParameter, model_trimParameter);
        }
    
        public virtual ObjectResult<GetCarsPost2000_Result> GetCarsPost2000()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsPost2000_Result>("GetCarsPost2000");
        }
    
        public virtual ObjectResult<GetCarsPost2005_Result> GetCarsPost2005()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsPost2005_Result>("GetCarsPost2005");
        }
    
        public virtual ObjectResult<GetCarsPost2010_Result> GetCarsPost2010()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsPost2010_Result>("GetCarsPost2010");
        }
    
        public virtual ObjectResult<GetCarsWithTransmissionType_Result> GetCarsWithTransmissionType(string transmission_type, string model_year, string make, string model_name, string model_trim)
        {
            var transmission_typeParameter = transmission_type != null ?
                new ObjectParameter("transmission_type", transmission_type) :
                new ObjectParameter("transmission_type", typeof(string));
    
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            var model_trimParameter = model_trim != null ?
                new ObjectParameter("model_trim", model_trim) :
                new ObjectParameter("model_trim", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarsWithTransmissionType_Result>("GetCarsWithTransmissionType", transmission_typeParameter, model_yearParameter, makeParameter, model_nameParameter, model_trimParameter);
        }
    
        public virtual ObjectResult<string> GetUniqueMakes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueMakes");
        }
    
        public virtual ObjectResult<string> GetUniqueMakesByYear(string model_year)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueMakesByYear", model_yearParameter);
        }
    
        public virtual ObjectResult<string> GetUniqueModels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueModels");
        }
    
        public virtual ObjectResult<string> GetUniqueModelsByMake(string make)
        {
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueModelsByMake", makeParameter);
        }
    
        public virtual ObjectResult<string> GetUniqueTransmissionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueTransmissionTypes");
        }
    
        public virtual ObjectResult<string> GetUniqueTrims()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueTrims");
        }
    
        public virtual ObjectResult<string> GetUniqueTrimsByMakeModelYear(string make, string model_name, string model_year)
        {
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueTrimsByMakeModelYear", makeParameter, model_nameParameter, model_yearParameter);
        }
    
        public virtual ObjectResult<string> GetUniqueYearsByMakeModel(string make, string model_name)
        {
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUniqueYearsByMakeModel", makeParameter, model_nameParameter);
        }
    
        public virtual ObjectResult<SortByDoors_Result> SortByDoors(string model_year, string make, string model_name, string model_trim, string transmission_type, string drive_type)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            var model_trimParameter = model_trim != null ?
                new ObjectParameter("model_trim", model_trim) :
                new ObjectParameter("model_trim", typeof(string));
    
            var transmission_typeParameter = transmission_type != null ?
                new ObjectParameter("transmission_type", transmission_type) :
                new ObjectParameter("transmission_type", typeof(string));
    
            var drive_typeParameter = drive_type != null ?
                new ObjectParameter("drive_type", drive_type) :
                new ObjectParameter("drive_type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortByDoors_Result>("SortByDoors", model_yearParameter, makeParameter, model_nameParameter, model_trimParameter, transmission_typeParameter, drive_typeParameter);
        }
    
        public virtual ObjectResult<SortByHorsepower_Result> SortByHorsepower(string model_year, string make, string model_name, string model_trim, string transmission_type, string drive_type)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            var model_trimParameter = model_trim != null ?
                new ObjectParameter("model_trim", model_trim) :
                new ObjectParameter("model_trim", typeof(string));
    
            var transmission_typeParameter = transmission_type != null ?
                new ObjectParameter("transmission_type", transmission_type) :
                new ObjectParameter("transmission_type", typeof(string));
    
            var drive_typeParameter = drive_type != null ?
                new ObjectParameter("drive_type", drive_type) :
                new ObjectParameter("drive_type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortByHorsepower_Result>("SortByHorsepower", model_yearParameter, makeParameter, model_nameParameter, model_trimParameter, transmission_typeParameter, drive_typeParameter);
        }
    
        public virtual ObjectResult<SortBySeats_Result> SortBySeats(string model_year, string make, string model_name, string model_trim, string transmission_type, string drive_type)
        {
            var model_yearParameter = model_year != null ?
                new ObjectParameter("model_year", model_year) :
                new ObjectParameter("model_year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var model_nameParameter = model_name != null ?
                new ObjectParameter("model_name", model_name) :
                new ObjectParameter("model_name", typeof(string));
    
            var model_trimParameter = model_trim != null ?
                new ObjectParameter("model_trim", model_trim) :
                new ObjectParameter("model_trim", typeof(string));
    
            var transmission_typeParameter = transmission_type != null ?
                new ObjectParameter("transmission_type", transmission_type) :
                new ObjectParameter("transmission_type", typeof(string));
    
            var drive_typeParameter = drive_type != null ?
                new ObjectParameter("drive_type", drive_type) :
                new ObjectParameter("drive_type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortBySeats_Result>("SortBySeats", model_yearParameter, makeParameter, model_nameParameter, model_trimParameter, transmission_typeParameter, drive_typeParameter);
        }
    
        public virtual ObjectResult<SortByWeight_Result> SortByWeight()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortByWeight_Result>("SortByWeight");
        }
    
        public virtual ObjectResult<SortByWeightHorsepower_Result> SortByWeightHorsepower()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortByWeightHorsepower_Result>("SortByWeightHorsepower");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
